var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Main-Functions","page":"API Reference","title":"Main Functions","text":"","category":"section"},{"location":"api/#SymbolicIntegration.integrate","page":"API Reference","title":"SymbolicIntegration.integrate","text":"integrate(f, x, method::AbstractIntegrationMethod=RischMethod(); kwargs...)\n\nCompute the symbolic integral of expression f with respect to variable x  using the specified integration method.\n\nArguments\n\nf: Symbolic expression to integrate (Symbolics.Num)\nx: Integration variable (Symbolics.Num)  \nmethod: Integration method to use (AbstractIntegrationMethod, default: RischMethod())\n\nKeyword Arguments\n\nMethod-specific keyword arguments are passed to the method implementation\n\nReturns\n\nSymbolic expression representing the antiderivative (Symbolics.Num)\n\nExamples\n\nusing SymbolicIntegration, Symbolics\n@variables x\n\n# Using default Risch method\nintegrate(x^2, x)  # (1//3)*(x^3)\n\n# Explicit method with options\nintegrate(1/(x^2 + 1), x, RischMethod(use_algebraic_closure=true))  # atan(x)\n\n# Method configuration\nrisch = RischMethod(use_algebraic_closure=false, catch_errors=true)\nintegrate(exp(x), x, risch)  # exp(x)\n\n\n\n\n\n","category":"function"},{"location":"api/#Integration-Methods","page":"API Reference","title":"Integration Methods","text":"","category":"section"},{"location":"api/#Available-Methods","page":"API Reference","title":"Available Methods","text":"","category":"section"},{"location":"api/#SymbolicIntegration.RischMethod","page":"API Reference","title":"SymbolicIntegration.RischMethod","text":"RischMethod <: AbstractIntegrationMethod\n\nRisch algorithm for symbolic integration of elementary functions.\n\nFields\n\nuse_algebraic_closure::Bool: Whether to use algebraic closure for complex roots (default: true)\ncatch_errors::Bool: Whether to catch and handle algorithm errors gracefully (default: true)\n\n\n\n\n\n","category":"type"},{"location":"api/#Method-Traits","page":"API Reference","title":"Method Traits","text":"","category":"section"},{"location":"api/#SymbolicIntegration.method_supports_rational","page":"API Reference","title":"SymbolicIntegration.method_supports_rational","text":"method_supports_rational(method::RischMethod)\n\nCheck if the integration method supports rational function integration. Returns true for RischMethod.\n\n\n\n\n\n","category":"function"},{"location":"api/#SymbolicIntegration.method_supports_transcendental","page":"API Reference","title":"SymbolicIntegration.method_supports_transcendental","text":"method_supports_transcendental(method::RischMethod)\n\nCheck if the integration method supports transcendental function integration. Returns true for RischMethod.\n\n\n\n\n\n","category":"function"},{"location":"api/#Algorithm-Overview","page":"API Reference","title":"Algorithm Overview","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"SymbolicIntegration.jl implements the complete symbolic integration algorithms from Manuel Bronstein's book \"Symbolic Integration I: Transcendental Functions\".","category":"page"},{"location":"api/#Supported-Function-Classes","page":"API Reference","title":"Supported Function Classes","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Polynomial functions: ∫xⁿ dx\nRational functions: ∫P(x)/Q(x) dx using Rothstein-Trager method\nExponential functions: ∫exp(f(x)) dx using Risch algorithm\nLogarithmic functions: ∫log(f(x)) dx using integration by parts\nTrigonometric functions: Transformed to exponential form","category":"page"},{"location":"api/#Algorithm-Components","page":"API Reference","title":"Algorithm Components","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"The package includes implementations of:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"Hermite reduction for rational functions\nRothstein-Trager method for logarithmic parts\nRisch algorithm for transcendental functions\nDifferential field tower construction\nComplex root finding for arctangent terms","category":"page"},{"location":"api/#Internal-Structure","page":"API Reference","title":"Internal Structure","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"The package is organized into several algorithm modules:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"rational_functions.jl: Rational function integration algorithms\ntranscendental_functions.jl: Risch algorithm implementation  \ndifferential_fields.jl: Differential field operations\ncomplex_fields.jl: Complex number field handling\nfrontend.jl: User interface and expression conversion","category":"page"},{"location":"api/#Error-Handling","page":"API Reference","title":"Error Handling","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"The package defines custom exception types:","category":"page"},{"location":"api/","page":"API Reference","title":"API Reference","text":"NotImplementedError: For unsupported function types\nAlgorithmFailedError: When no elementary antiderivative exists\nAlgebraicNumbersInvolved: When algebraic numbers complicate the result","category":"page"},{"location":"api/#Index","page":"API Reference","title":"Index","text":"","category":"section"},{"location":"api/","page":"API Reference","title":"API Reference","text":"","category":"page"},{"location":"methods/overview/#Integration-Methods-Overview","page":"Integration Methods Overview","title":"Integration Methods Overview","text":"","category":"section"},{"location":"methods/overview/","page":"Integration Methods Overview","title":"Integration Methods Overview","text":"SymbolicIntegration.jl uses a flexible method dispatch system that allows you to choose different integration algorithms based on your needs.","category":"page"},{"location":"methods/overview/#Available-Methods","page":"Integration Methods Overview","title":"Available Methods","text":"","category":"section"},{"location":"methods/overview/#RischMethod-(Default)","page":"Integration Methods Overview","title":"RischMethod (Default)","text":"","category":"section"},{"location":"methods/overview/","page":"Integration Methods Overview","title":"Integration Methods Overview","text":"The Risch method is the complete algorithm for symbolic integration of elementary functions, based on Manuel Bronstein's algorithms.","category":"page"},{"location":"methods/overview/","page":"Integration Methods Overview","title":"Integration Methods Overview","text":"# Default usage\nintegrate(f, x)  # Automatically uses RischMethod\n\n# Explicit usage  \nintegrate(f, x, RischMethod())\n\n# With configuration\nintegrate(f, x, RischMethod(use_algebraic_closure=true, catch_errors=false))","category":"page"},{"location":"methods/overview/","page":"Integration Methods Overview","title":"Integration Methods Overview","text":"Capabilities:","category":"page"},{"location":"methods/overview/","page":"Integration Methods Overview","title":"Integration Methods Overview","text":"✅ Rational functions with exact arctangent terms\n✅ Exponential and logarithmic functions  \n✅ Trigonometric functions (via transformation)\n✅ Complex root handling\n✅ Integration by parts","category":"page"},{"location":"methods/overview/","page":"Integration Methods Overview","title":"Integration Methods Overview","text":"Best for: Complete symbolic integration with guaranteed correctness","category":"page"},{"location":"methods/overview/","page":"Integration Methods Overview","title":"Integration Methods Overview","text":"→ See detailed Risch documentation","category":"page"},{"location":"methods/risch/#Risch-Method","page":"Risch Method","title":"Risch Method","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"The Risch method is a complete algorithm for symbolic integration of elementary functions. It implements the algorithms from Manuel Bronstein's \"Symbolic Integration I: Transcendental Functions\".","category":"page"},{"location":"methods/risch/#Overview","page":"Risch Method","title":"Overview","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"The Risch method is currently the primary integration method in SymbolicIntegration.jl. It provides exact symbolic integration for:","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Rational functions: Using the Rothstein-Trager method\nExponential functions: Using differential field towers\nLogarithmic functions: Integration by parts and substitution\nTrigonometric functions: Transformation to exponential form\nComplex root handling: Exact arctangent terms","category":"page"},{"location":"methods/risch/#Usage","page":"Risch Method","title":"Usage","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"using SymbolicIntegration, Symbolics\n@variables x\n\n# Default method (uses RischMethod automatically)\nintegrate(x^2, x)  # (1//3)*(x^3)\n\n# Explicit Risch method\nintegrate(1/(x^2 + 1), x, RischMethod())  # atan(x)\n\n# Risch method with options\nrisch = RischMethod(use_algebraic_closure=true, catch_errors=false)\nintegrate(f, x, risch)","category":"page"},{"location":"methods/risch/#Configuration-Options","page":"Risch Method","title":"Configuration Options","text":"","category":"section"},{"location":"methods/risch/#Constructor","page":"Risch Method","title":"Constructor","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"RischMethod(; use_algebraic_closure=true, catch_errors=true)","category":"page"},{"location":"methods/risch/#Options","page":"Risch Method","title":"Options","text":"","category":"section"},{"location":"methods/risch/#use_algebraic_closure::Bool-(default:-true)","page":"Risch Method","title":"use_algebraic_closure::Bool (default: true)","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Controls whether the algorithm uses algebraic closure for finding complex roots.","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"true: Finds complex roots, produces exact arctangent terms\nfalse: Only rational roots, faster for simple cases","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"# With complex roots (produces atan terms)\nintegrate(1/(x^2 + 1), x, RischMethod(use_algebraic_closure=true))  # atan(x)\n\n# Without complex roots (may miss arctangent terms)  \nintegrate(1/(x^2 + 1), x, RischMethod(use_algebraic_closure=false))  # May return 0","category":"page"},{"location":"methods/risch/#catch_errors::Bool-(default:-true)","page":"Risch Method","title":"catch_errors::Bool (default: true)","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Controls error handling behavior.","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"true: Returns unevaluated integrals for unsupported cases\nfalse: Throws exceptions for algorithmic failures","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"# Graceful error handling\nintegrate(unsupported_function, x, RischMethod(catch_errors=true))  # Returns ∫(f, x)\n\n# Strict error handling  \nintegrate(unsupported_function, x, RischMethod(catch_errors=false))  # Throws exception","category":"page"},{"location":"methods/risch/#Algorithm-Components","page":"Risch Method","title":"Algorithm Components","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"The Risch method implementation includes:","category":"page"},{"location":"methods/risch/#Rational-Function-Integration-(Chapter-2)","page":"Risch Method","title":"Rational Function Integration (Chapter 2)","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Hermite reduction: Simplifies rational functions\nRothstein-Trager method: Finds logarithmic parts\nPartial fraction decomposition: Handles complex denominators\nComplex root finding: Produces arctangent terms","category":"page"},{"location":"methods/risch/#Transcendental-Function-Integration-(Chapters-5-6)","page":"Risch Method","title":"Transcendental Function Integration (Chapters 5-6)","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Differential field towers: Handles nested transcendental functions\nRisch algorithm: Complete method for elementary functions\nPrimitive cases: Direct integration\nHyperexponential cases: Exponential function handling","category":"page"},{"location":"methods/risch/#Supporting-Algorithms","page":"Risch Method","title":"Supporting Algorithms","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Expression analysis: Converts symbolic expressions to algebraic form\nField extensions: Builds differential field towers\nRoot finding: Complex and rational root computation\nResult conversion: Transforms back to symbolic form","category":"page"},{"location":"methods/risch/#Function-Classes-Supported","page":"Risch Method","title":"Function Classes Supported","text":"","category":"section"},{"location":"methods/risch/#Polynomial-Functions","page":"Risch Method","title":"Polynomial Functions","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"integrate(x^n, x)           # x^(n+1)/(n+1)\nintegrate(3*x^2 + 2*x + 1, x)  # x^3 + x^2 + x","category":"page"},{"location":"methods/risch/#Rational-Functions","page":"Risch Method","title":"Rational Functions","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"integrate(1/x, x)               # log(x)\nintegrate(1/(x^2 + 1), x)       # atan(x)\nintegrate((x+1)/(x+2), x)       # x - log(2 + x)","category":"page"},{"location":"methods/risch/#Exponential-Functions","page":"Risch Method","title":"Exponential Functions","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"integrate(exp(x), x)            # exp(x)\nintegrate(x*exp(x), x)          # -exp(x) + x*exp(x)\nintegrate(exp(x^2)*x, x)        # (1/2)*exp(x^2)","category":"page"},{"location":"methods/risch/#Logarithmic-Functions","page":"Risch Method","title":"Logarithmic Functions","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"integrate(log(x), x)            # -x + x*log(x)\nintegrate(1/(x*log(x)), x)      # log(log(x))\nintegrate(log(x)^2, x)          # x*log(x)^2 - 2*x*log(x) + 2*x","category":"page"},{"location":"methods/risch/#Trigonometric-Functions","page":"Risch Method","title":"Trigonometric Functions","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"integrate(sin(x), x)            # Transformed to exponential form\nintegrate(cos(x), x)            # Transformed to exponential form  \nintegrate(tan(x), x)            # Uses differential field extension","category":"page"},{"location":"methods/risch/#Limitations","page":"Risch Method","title":"Limitations","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"The Risch method, following Bronstein's book, does not handle:","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Algebraic functions: √x, x^(1/3), etc.\nNon-elementary functions: Functions without elementary antiderivatives\nSpecial functions: Bessel functions, hypergeometric functions, etc.","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"For these cases, the algorithm will:","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Return unevaluated integrals if catch_errors=true\nThrow appropriate exceptions if catch_errors=false","category":"page"},{"location":"methods/risch/#Performance-Considerations","page":"Risch Method","title":"Performance Considerations","text":"","category":"section"},{"location":"methods/risch/#When-to-Use-Different-Options","page":"Risch Method","title":"When to Use Different Options","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Research/verification: catch_errors=false for strict algorithmic behavior\nProduction applications: catch_errors=true for robust operation\nComplex analysis: use_algebraic_closure=true for complete results\nSimple computations: use_algebraic_closure=false for faster execution","category":"page"},{"location":"methods/risch/#Complexity","page":"Risch Method","title":"Complexity","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Polynomial functions: O(n) where n is degree\nRational functions: Depends on degree and factorization complexity\nTranscendental functions: Exponential in tower height","category":"page"},{"location":"methods/risch/#Examples","page":"Risch Method","title":"Examples","text":"","category":"section"},{"location":"methods/risch/#Basic-Usage","page":"Risch Method","title":"Basic Usage","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"@variables x\n\n# Simple cases\nintegrate(x^3, x, RischMethod())                    # (1//4)*(x^4)\nintegrate(1/x, x, RischMethod())                    # log(x)\nintegrate(exp(x), x, RischMethod())                 # exp(x)","category":"page"},{"location":"methods/risch/#Advanced-Cases","page":"Risch Method","title":"Advanced Cases","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"# Complex rational function with arctangent\nf = (3*x - 4*x^2 + 3*x^3)/(1 + x^2)\nintegrate(f, x, RischMethod())  # -4x + 4atan(x) + (3//2)*(x^2)\n\n# Integration by parts\nintegrate(log(x), x, RischMethod())  # -x + x*log(x)\n\n# Nested transcendental functions\nintegrate(1/(x*log(x)), x, RischMethod())  # log(log(x))","category":"page"},{"location":"methods/risch/#Method-Configuration","page":"Risch Method","title":"Method Configuration","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"# For research (strict error handling)\nresearch_risch = RischMethod(use_algebraic_closure=true, catch_errors=false)\n\n# For production (graceful error handling)\nproduction_risch = RischMethod(use_algebraic_closure=true, catch_errors=true)\n\n# For simple cases (faster computation)\nsimple_risch = RischMethod(use_algebraic_closure=false, catch_errors=true)","category":"page"},{"location":"methods/risch/#Algorithm-References","page":"Risch Method","title":"Algorithm References","text":"","category":"section"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"The implementation follows:","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"Manuel Bronstein: \"Symbolic Integration I: Transcendental Functions\", 2nd ed., Springer 2005\nChapter 1: General algorithms (polynomial operations, resultants)\nChapter 2: Rational function integration\nChapters 5-6: Transcendental function integration (Risch algorithm)\nAdditional chapters: Parametric problems, coupled systems","category":"page"},{"location":"methods/risch/","page":"Risch Method","title":"Risch Method","text":"This provides a complete, reference implementation of the Risch algorithm for elementary function integration.","category":"page"},{"location":"manual/basic_usage/#Basic-Usage","page":"Basic Usage","title":"Basic Usage","text":"","category":"section"},{"location":"manual/basic_usage/#Creating-Symbolic-Variables","page":"Basic Usage","title":"Creating Symbolic Variables","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Before integrating, you need to create symbolic variables using Symbolics.jl:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using SymbolicIntegration, Symbolics\n\n@variables x y z","category":"page"},{"location":"manual/basic_usage/#The-integrate-Function","page":"Basic Usage","title":"The integrate Function","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The main function for symbolic integration uses method dispatch to choose algorithms:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"# Default method (RischMethod)\nintegrate(expr, var)\n\n# Explicit method selection\nintegrate(expr, var, method)","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"# Basic polynomial integration\nintegrate(x, x)      # (1//2)*(x^2)\nintegrate(x^2, x)    # (1//3)*(x^3)  \nintegrate(x^3, x)    # (1//4)*(x^4)\n\n# Rational functions\nintegrate(1/x, x)    # log(x)\nintegrate(1/(1+x), x) # log(1 + x)","category":"page"},{"location":"manual/basic_usage/#Supported-Function-Types","page":"Basic Usage","title":"Supported Function Types","text":"","category":"section"},{"location":"manual/basic_usage/#Polynomials","page":"Basic Usage","title":"Polynomials","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"integrate(3*x^2 + 2*x + 1, x)  # x^3 + x^2 + x","category":"page"},{"location":"manual/basic_usage/#Rational-Functions","page":"Basic Usage","title":"Rational Functions","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"integrate((2*x + 1)/(x^2 + x + 1), x)  # log(1 + x + x^2)\nintegrate(1/(1 + x^2), x)              # atan(x)","category":"page"},{"location":"manual/basic_usage/#Exponential-Functions","page":"Basic Usage","title":"Exponential Functions","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"integrate(exp(x), x)      # exp(x)\nintegrate(x*exp(x), x)    # -exp(x) + x*exp(x)","category":"page"},{"location":"manual/basic_usage/#Logarithmic-Functions","page":"Basic Usage","title":"Logarithmic Functions","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"integrate(log(x), x)      # -x + x*log(x)\nintegrate(1/(x*log(x)), x) # log(log(x))","category":"page"},{"location":"manual/basic_usage/#Trigonometric-Functions","page":"Basic Usage","title":"Trigonometric Functions","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"integrate(sin(x), x)   # -cos(x)\nintegrate(cos(x), x)   # sin(x)  \nintegrate(tan(x), x)   # -log(cos(x))","category":"page"},{"location":"manual/basic_usage/#Method-Selection","page":"Basic Usage","title":"Method Selection","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"SymbolicIntegration.jl supports multiple integration methods through method dispatch:","category":"page"},{"location":"manual/basic_usage/#Default-Method-(RischMethod)","page":"Basic Usage","title":"Default Method (RischMethod)","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"# These are equivalent\nintegrate(f, x)\nintegrate(f, x, RischMethod())","category":"page"},{"location":"manual/basic_usage/#Method-Configuration","page":"Basic Usage","title":"Method Configuration","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"# Configure method behavior\nrisch_exact = RischMethod(use_algebraic_closure=true, catch_errors=false)\nintegrate(1/(x^2 + 1), x, risch_exact)  # atan(x) with strict error handling\n\nrisch_robust = RischMethod(use_algebraic_closure=true, catch_errors=true)  \nintegrate(difficult_function, x, risch_robust)  # Graceful error handling","category":"page"},{"location":"manual/basic_usage/#Method-Comparison","page":"Basic Usage","title":"Method Comparison","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"# For exact results with full complex root handling\nintegrate(f, x, RischMethod(use_algebraic_closure=true))\n\n# For faster computation (may miss some arctangent terms)\nintegrate(f, x, RischMethod(use_algebraic_closure=false))","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"See the Integration Methods section for complete details on available methods and their capabilities.","category":"page"},{"location":"manual/basic_usage/#Error-Handling","page":"Basic Usage","title":"Error Handling","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"SymbolicIntegration.jl will throw appropriate errors for unsupported cases:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using SymbolicIntegration, Symbolics\n@variables x\n\n# This will throw NotImplementedError for algebraic functions\nintegrate(sqrt(x), x)  # Error: algebraic functions not supported\n\n# This will throw AlgorithmFailedError if no elementary form exists  \nintegrate(exp(x^2), x)  # Error: no elementary antiderivative","category":"page"},{"location":"manual/basic_usage/#Options","page":"Basic Usage","title":"Options","text":"","category":"section"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The integrate function accepts several optional parameters:","category":"page"},{"location":"manual/basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"integrate(expr, var; \n    useQQBar=false,                    # Use algebraic closure for roots\n    catchNotImplementedError=true,     # Catch implementation errors\n    catchAlgorithmFailedError=true     # Catch algorithm failures\n)","category":"page"},{"location":"manual/getting_started/#Getting-Started","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"manual/getting_started/#Installation","page":"Getting Started","title":"Installation","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"SymbolicIntegration.jl can be installed using the Julia package manager:","category":"page"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"julia> using Pkg\njulia> Pkg.add(\"SymbolicIntegration\")","category":"page"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"Or in package mode (press ] in the Julia REPL):","category":"page"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"pkg> add SymbolicIntegration","category":"page"},{"location":"manual/getting_started/#Basic-Usage","page":"Getting Started","title":"Basic Usage","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"After installation, load the package along with Symbolics.jl for symbolic variable creation:","category":"page"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"using SymbolicIntegration, Symbolics\n\n# Create symbolic variables\n@variables x\n\n# Integrate a simple polynomial\nintegrate(x^2, x)  # Returns (1//3)*(x^3)","category":"page"},{"location":"manual/getting_started/#Dependencies","page":"Getting Started","title":"Dependencies","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"SymbolicIntegration.jl builds on several key packages in the Julia ecosystem:","category":"page"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"Symbolics.jl: Provides the symbolic expression system and user interface\nAbstractAlgebra.jl: Generic computer algebra algorithms  \nNemo.jl: Fast calculations with algebraic numbers","category":"page"},{"location":"manual/getting_started/#System-Requirements","page":"Getting Started","title":"System Requirements","text":"","category":"section"},{"location":"manual/getting_started/","page":"Getting Started","title":"Getting Started","text":"Julia 1.10 or later\nCompatible with Linux, macOS, and Windows","category":"page"},{"location":"#SymbolicIntegration.jl","page":"Home","title":"SymbolicIntegration.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SymbolicIntegration.jl provides Julia implementations of symbolic integration algorithms.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The front-end (i.e., the user interface) uses Symbolics.jl. The actual integration algorithms are implemented in a generic way using AbstractAlgebra.jl. Some algorithms require Nemo.jl for calculations with algebraic numbers.","category":"page"},{"location":"","page":"Home","title":"Home","text":"SymbolicIntegration.jl is based on the algorithms from the book","category":"page"},{"location":"","page":"Home","title":"Home","text":"Manuel Bronstein, Symbolic Integration I: Transcentental Functions, 2nd ed, Springer 2005,","category":"page"},{"location":"","page":"Home","title":"Home","text":"for which a pretty complete set of reference implementations is provided.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Currently, SymbolicIntegration.jl can integrate:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rational functions\nIntegrands involving transcendental elementary functions like exp, log, sin, etc.","category":"page"},{"location":"","page":"Home","title":"Home","text":"As in the book, integrands involving algebraic functions like sqrt and non-integer powers are not treated.","category":"page"},{"location":"","page":"Home","title":"Home","text":"note: Note\nSymbolicIntegration.jl is still in an early stage of development and should not be expected to run stably in all situations. It comes with absolutely no warranty whatsoever.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"SymbolicIntegration\")","category":"page"},{"location":"#Quick-Start","page":"Home","title":"Quick Start","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using SymbolicIntegration, Symbolics\n\n@variables x\n\n# Basic polynomial integration (uses default RischMethod)\nintegrate(x^2, x)  # Returns (1//3)*(x^3)\n\n# Rational function integration with complex roots\nf = (x^3 + x^2 + x + 2)/(x^4 + 3*x^2 + 2)\nintegrate(f, x)  # Returns (1//2)*log(2 + x^2) + atan(x)\n\n# Transcendental functions\nintegrate(exp(x), x)    # Returns exp(x)\nintegrate(log(x), x)    # Returns -x + x*log(x)\n\n# Complex root integration (arctangent cases)\nintegrate(1/(x^2 + 1), x)  # Returns atan(x)\n\n# Method selection and configuration\nintegrate(f, x, RischMethod())  # Explicit method choice\nintegrate(f, x, RischMethod(use_algebraic_closure=true))  # With options","category":"page"},{"location":"#Integration-Methods","page":"Home","title":"Integration Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"SymbolicIntegration.jl provides multiple integration algorithms through a flexible method dispatch system:","category":"page"},{"location":"#RischMethod-(Default)","page":"Home","title":"RischMethod (Default)","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The complete Risch algorithm for elementary function integration:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Exact results: Guaranteed correct symbolic integration\nComplex roots: Produces exact arctangent terms  \nComplete coverage: Rational and transcendental functions\nConfigurable: Options for performance vs completeness","category":"page"},{"location":"","page":"Home","title":"Home","text":"# Default method\nintegrate(f, x)  \n\n# Explicit method with options\nintegrate(f, x, RischMethod(use_algebraic_closure=true))","category":"page"},{"location":"#Future-Methods","page":"Home","title":"Future Methods","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The framework supports additional integration algorithms:","category":"page"},{"location":"","page":"Home","title":"Home","text":"HeuristicMethod: Fast pattern-matching integration\nNumericalMethod: Numerical integration fallbacks\nSymPyMethod: SymPy backend compatibility","category":"page"},{"location":"","page":"Home","title":"Home","text":"→ See complete methods documentation","category":"page"},{"location":"#Algorithm-Coverage","page":"Home","title":"Algorithm Coverage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The RischMethod implements the complete suite of algorithms from Bronstein's book:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Rational Function Integration (Chapter 2)\nHermite reduction\nRothstein-Trager method for logarithmic parts\nComplexification and real form conversion\nTranscendental Function Integration (Chapters 5-6)  \nRisch algorithm for elementary functions\nDifferential field towers\nPrimitive and hyperexponential cases\nAlgebraic Function Integration (Future work)\nCurrently not implemented","category":"page"},{"location":"#Contributing","page":"Home","title":"Contributing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"We welcome contributions! Please see the Symbolics.jl contributing guidelines.","category":"page"},{"location":"#Citation","page":"Home","title":"Citation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"If you use SymbolicIntegration.jl in your research, please cite:","category":"page"},{"location":"","page":"Home","title":"Home","text":"@software{SymbolicIntegration.jl,\n  author = {Harald Hofstätter and contributors},\n  title = {SymbolicIntegration.jl: Symbolic Integration for Julia},\n  url = {https://github.com/JuliaSymbolics/SymbolicIntegration.jl},\n  year = {2023-2025}\n}","category":"page"},{"location":"#Table-of-Contents","page":"Home","title":"Table of Contents","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/getting_started.md\",\n    \"manual/basic_usage.md\", \n    \"manual/rational_functions.md\",\n    \"manual/transcendental_functions.md\",\n    \"api.md\"\n]\nDepth = 2","category":"page"},{"location":"manual/rational_functions/#Rational-Function-Integration","page":"Rational Function Integration","title":"Rational Function Integration","text":"","category":"section"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"SymbolicIntegration.jl implements the complete algorithm for integrating rational functions based on Bronstein's book Chapter 2.","category":"page"},{"location":"manual/rational_functions/#Theory","page":"Rational Function Integration","title":"Theory","text":"","category":"section"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"A rational function is a quotient of polynomials:","category":"page"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"f(x) = P(x)/Q(x)","category":"page"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"The integration algorithm consists of three main steps:","category":"page"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"Hermite Reduction: Reduces the rational function to a simpler form\nLogarithmic Part: Finds the logarithmic terms using the Rothstein-Trager method\nPolynomial Part: Integrates any remaining polynomial terms","category":"page"},{"location":"manual/rational_functions/#Examples","page":"Rational Function Integration","title":"Examples","text":"","category":"section"},{"location":"manual/rational_functions/#Simple-Rational-Functions","page":"Rational Function Integration","title":"Simple Rational Functions","text":"","category":"section"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"using SymbolicIntegration, Symbolics\n@variables x\n\n# Linear over linear  \nintegrate((2*x + 3)/(x + 1), x)  # 2*x + log(1 + x)\n\n# Quadratic denominators\nintegrate(1/(x^2 + 1), x)        # atan(x)\nintegrate(x/(x^2 + 1), x)        # (1//2)*log(1 + x^2)","category":"page"},{"location":"manual/rational_functions/#Partial-Fractions","page":"Rational Function Integration","title":"Partial Fractions","text":"","category":"section"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"The algorithm automatically handles partial fraction decomposition:","category":"page"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"# This gets decomposed into simpler fractions\nf = (x^3 + x^2 + x + 2)//(x^4 + 3*x^2 + 2)\nintegrate(f, x)  # (1//2)*log(2 + x^2) + atan(x)","category":"page"},{"location":"manual/rational_functions/#Complex-Cases","page":"Rational Function Integration","title":"Complex Cases","text":"","category":"section"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"For cases involving complex roots, the algorithm uses the Rothstein-Trager method:","category":"page"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"# Denominator has complex roots\nf = (3*x - 4*x^2 + 3*x^3)/(1 + x^2)\nintegrate(f, x)  # -4*x + (3//2)*x^2 + 4*atan(x)","category":"page"},{"location":"manual/rational_functions/#Algorithm-Details","page":"Rational Function Integration","title":"Algorithm Details","text":"","category":"section"},{"location":"manual/rational_functions/#Hermite-Reduction","page":"Rational Function Integration","title":"Hermite Reduction","text":"","category":"section"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"# The HermiteReduce function is available for direct use\nusing SymbolicIntegration\nR, x = polynomial_ring(QQ, \"x\")\nA = 3*x^2 + 2*x + 1\nD = x^3 + x^2 + x + 1\ng, h = HermiteReduce(A, D)","category":"page"},{"location":"manual/rational_functions/#Rothstein-Trager-Method","page":"Rational Function Integration","title":"Rothstein-Trager Method","text":"","category":"section"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"For finding logarithmic parts:","category":"page"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"# IntRationalLogPart implements the Rothstein-Trager algorithm\nlog_terms = IntRationalLogPart(A, D)","category":"page"},{"location":"manual/rational_functions/#Limitations","page":"Rational Function Integration","title":"Limitations","text":"","category":"section"},{"location":"manual/rational_functions/","page":"Rational Function Integration","title":"Rational Function Integration","text":"Only rational functions are supported (no algebraic functions like √x)\nResults are exact symbolic expressions\nPerformance may vary for very large polynomials","category":"page"},{"location":"manual/transcendental_functions/#Transcendental-Function-Integration","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"SymbolicIntegration.jl implements the Risch algorithm for integrating elementary transcendental functions.","category":"page"},{"location":"manual/transcendental_functions/#Supported-Functions","page":"Transcendental Function Integration","title":"Supported Functions","text":"","category":"section"},{"location":"manual/transcendental_functions/#Exponential-Functions","page":"Transcendental Function Integration","title":"Exponential Functions","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"using SymbolicIntegration, Symbolics\n@variables x\n\nintegrate(exp(x), x)        # exp(x)\nintegrate(exp(2*x), x)      # (1//2)*exp(2*x)\nintegrate(x*exp(x), x)      # -exp(x) + x*exp(x)","category":"page"},{"location":"manual/transcendental_functions/#Logarithmic-Functions","page":"Transcendental Function Integration","title":"Logarithmic Functions","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"integrate(log(x), x)        # -x + x*log(x)\nintegrate(1/(x*log(x)), x)  # log(log(x))\nintegrate(log(x)^2, x)      # x*log(x)^2 - 2*x*log(x) + 2*x","category":"page"},{"location":"manual/transcendental_functions/#Trigonometric-Functions","page":"Transcendental Function Integration","title":"Trigonometric Functions","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"Basic trigonometric functions are transformed to exponential form:","category":"page"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"integrate(sin(x), x)   # Transformed via half-angle formulas\nintegrate(cos(x), x)   # Transformed via half-angle formulas  \nintegrate(tan(x), x)   # Uses differential field extension","category":"page"},{"location":"manual/transcendental_functions/#Hyperbolic-Functions","page":"Transcendental Function Integration","title":"Hyperbolic Functions","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"Hyperbolic functions are transformed to exponential form:","category":"page"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"integrate(sinh(x), x)  # Equivalent to (exp(x) - exp(-x))/2\nintegrate(cosh(x), x)  # Equivalent to (exp(x) + exp(-x))/2\nintegrate(tanh(x), x)  # Transformed to exponential form","category":"page"},{"location":"manual/transcendental_functions/#Algorithm:-The-Risch-Method","page":"Transcendental Function Integration","title":"Algorithm: The Risch Method","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"The Risch algorithm builds a tower of differential fields to handle transcendental extensions systematically.","category":"page"},{"location":"manual/transcendental_functions/#Differential-Field-Tower","page":"Transcendental Function Integration","title":"Differential Field Tower","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"For an integrand like exp(x^2) * log(x), the algorithm constructs:","category":"page"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"Base field: ℚ(x) with derivation d/dx\nFirst extension: ℚ(x, log(x)) with D(log(x)) = 1/x\nSecond extension: ℚ(x, log(x), exp(x^2)) with D(exp(x^2)) = 2*x*exp(x^2)","category":"page"},{"location":"manual/transcendental_functions/#Integration-Steps","page":"Transcendental Function Integration","title":"Integration Steps","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"Field Tower Construction: Build the appropriate differential field tower\nCanonical Form: Transform the integrand to canonical form in the tower\nResidue Computation: Apply the Risch algorithm recursively\nResult Assembly: Convert back to symbolic form","category":"page"},{"location":"manual/transcendental_functions/#Implementation-Details","page":"Transcendental Function Integration","title":"Implementation Details","text":"","category":"section"},{"location":"manual/transcendental_functions/#Function-Transformations","page":"Transcendental Function Integration","title":"Function Transformations","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"The algorithm transforms complex functions to simpler forms:","category":"page"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"Trigonometric functions → Half-angle formulas with tan(x/2)\nHyperbolic functions → Exponential expressions\nInverse functions → Differential field extensions","category":"page"},{"location":"manual/transcendental_functions/#Example:-sin(x)-Integration","page":"Transcendental Function Integration","title":"Example: sin(x) Integration","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"# sin(x) is transformed to:\n# 2*tan(x/2) / (1 + tan(x/2)^2)\n# Then integrated using the Risch algorithm","category":"page"},{"location":"manual/transcendental_functions/#Advanced-Usage","page":"Transcendental Function Integration","title":"Advanced Usage","text":"","category":"section"},{"location":"manual/transcendental_functions/#Direct-Algorithm-Access","page":"Transcendental Function Integration","title":"Direct Algorithm Access","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"You can access the lower-level algorithms directly:","category":"page"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"# Use the Risch algorithm directly\nusing SymbolicIntegration\n# ... (advanced example would go here)","category":"page"},{"location":"manual/transcendental_functions/#Custom-Derivations","page":"Transcendental Function Integration","title":"Custom Derivations","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"# Create custom differential field extensions\n# ... (advanced example would go here)  ","category":"page"},{"location":"manual/transcendental_functions/#Limitations","page":"Transcendental Function Integration","title":"Limitations","text":"","category":"section"},{"location":"manual/transcendental_functions/","page":"Transcendental Function Integration","title":"Transcendental Function Integration","text":"No algebraic functions (√x, x^(1/3), etc.)\nSome complex trigonometric cases may not be handled\nNon-elementary integrals return unevaluated forms","category":"page"}]
}
